name: CAWS Quality Gates

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main, develop]

jobs:
  validate-spec:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Validate working spec
        run: |
          if [ -f ".caws/working-spec.yaml" ]; then
            node apps/tools/caws/validate.js .caws/working-spec.yaml
          else
            echo "⚠️ No working spec found, skipping validation"
          fi

  naming-guard:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Block shadow file patterns
        run: |
          # Get files changed in this PR/branch
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_REF="${{ github.event.pull_request.base.sha }}"
            HEAD_REF="${{ github.event.pull_request.head.sha }}"
            CHANGED_FILES=$(git diff --name-only $BASE_REF...$HEAD_REF || echo "")
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1...HEAD || echo "")
          fi

          echo "Changed files: $CHANGED_FILES"

          # Check for shadow patterns
          BAD_FILES=$(echo "$CHANGED_FILES" | grep -E '/(copy|final|enhanced|v2)[.-]|/(new-)|(^|/)_.+\.| - copy\.' || echo "")

          if [ -n "$BAD_FILES" ]; then
            echo "❌ Shadow/duplicate filename patterns detected:"
            echo "$BAD_FILES"
            echo "💡 Use in-place refactor or codemod instead of creating shadow files"
            exit 1
          fi

          echo "✅ No shadow filename patterns found"

  scope-guard:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install yq
        run: |
          wget -q https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Ensure changes are within scope.in
        run: |
          if [ ! -f ".caws/working-spec.yaml" ]; then
            echo "⚠️ No working spec found, skipping scope check"
            exit 0
          fi

          # Get files changed
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_REF="${{ github.event.pull_request.base.sha }}"
            HEAD_REF="${{ github.event.pull_request.head.sha }}"
            CHANGED_FILES=$(git diff --name-only $BASE_REF...$HEAD_REF || echo "")
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1...HEAD || echo "")
          fi

          # Get scope.in from working spec
          SCOPE_IN=$(yq eval '.scope.in[]' .caws/working-spec.yaml 2>/dev/null || echo "")

          if [ -z "$SCOPE_IN" ]; then
            echo "⚠️ No scope.in defined, skipping scope check"
            exit 0
          fi

          # Create patterns from scope
          echo "$SCOPE_IN" | sed 's|^|^|; s|$|/|' > /tmp/scope_patterns.txt

          # Check each changed file
          OUT_OF_SCOPE=""
          for file in $CHANGED_FILES; do
            if [[ ! "$file" =~ ^\.caws/ ]] && [[ ! "$file" =~ ^\.agent/ ]] && [[ ! "$file" =~ ^\.github/ ]]; then
              if ! grep -q -E -f /tmp/scope_patterns.txt <<< "$file"; then
                OUT_OF_SCOPE="$OUT_OF_SCOPE\n$file"
              fi
            fi
          done

          if [ -n "$OUT_OF_SCOPE" ]; then
            echo -e "❌ Files outside scope.in:$OUT_OF_SCOPE"
            echo "💡 Update scope.in in .caws/working-spec.yaml or create a spec delta"
            exit 1
          fi

          echo "✅ All changed files are within scope"

  budget-guard:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install yq
        run: |
          wget -q https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Enforce change budget
        run: |
          if [ ! -f ".caws/working-spec.yaml" ]; then
            echo "⚠️ No working spec found, skipping budget check"
            exit 0
          fi

          # Get budget from working spec
          MAX_FILES=$(yq eval '.change_budget.max_files' .caws/working-spec.yaml)
          MAX_LOC=$(yq eval '.change_budget.max_loc' .caws/working-spec.yaml)

          # Get changes
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_REF="${{ github.event.pull_request.base.sha }}"
            HEAD_REF="${{ github.event.pull_request.head.sha }}"
            FILES_CHANGED=$(git diff --name-only $BASE_REF...$HEAD_REF | wc -l)
            LOC_CHANGED=$(git diff --unified=0 $BASE_REF...$HEAD_REF | grep -E '^\+|^-' | wc -l)
          else
            FILES_CHANGED=$(git diff --name-only HEAD~1...HEAD | wc -l)
            LOC_CHANGED=$(git diff --unified=0 HEAD~1...HEAD | grep -E '^\+|^-' | wc -l)
          fi

          echo "Files: $FILES_CHANGED (budget: $MAX_FILES)"
          echo "LOC: $LOC_CHANGED (budget: $MAX_LOC)"

          if [ "$FILES_CHANGED" -gt "$MAX_FILES" ]; then
            echo "❌ Files changed ($FILES_CHANGED) exceeds budget ($MAX_FILES)"
            exit 1
          fi

          if [ "$LOC_CHANGED" -gt "$MAX_LOC" ]; then
            echo "❌ Lines changed ($LOC_CHANGED) exceeds budget ($MAX_LOC)"
            exit 1
          fi

          echo "✅ Change budget respected"

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: |
          if [ -f "package.json" ]; then
            npm run lint || echo "⚠️ No lint script found"
          else
            echo "⚠️ No package.json found, skipping lint"
          fi

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          if [ -f "package.json" ]; then
            npm run test:unit || echo "⚠️ No test script found"
          else
            echo "⚠️ No package.json found, skipping tests"
          fi

  provenance:
    runs-on: ubuntu-latest
    needs: [validate-spec, naming-guard, scope-guard, budget-guard, lint, test]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Generate SBOM
        run: node apps/tools/caws/attest.js sbom

      - name: Generate SLSA attestation
        run: node apps/tools/caws/attest.js slsa

      - name: Generate provenance
        run: node apps/tools/caws/provenance.js generate caws-cli unknown unknown

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: caws-artifacts
          path: |
            .agent/sbom.json
            .agent/attestation.json
            .agent/provenance.json

  trust-score:
    runs-on: ubuntu-latest
    needs: [provenance]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Calculate trust score
        run: |
          if [ -f ".caws/working-spec.yaml" ]; then
            RISK_TIER=$(yq eval '.risk_tier' .caws/working-spec.yaml)

            # Run quality gates
            node apps/tools/caws/gates.js coverage $RISK_TIER 0.85
            node apps/tools/caws/gates.js mutation $RISK_TIER 0.60

            echo "✅ Quality gates passed for tier $RISK_TIER"
          else
            echo "⚠️ No working spec found, skipping trust score calculation"
          fi
